// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto
// Protobuf C++ Version: 5.29.5

#include "include/test.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr TrainingSample::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : state_features_{},
        policy_target_{},
        is_bidding_{false},
        player_idx_{0},
        value_target_{0},
        actual_game_win_value_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TrainingSample::TrainingSample(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrainingSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainingSampleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainingSampleDefaultTypeInternal() {}
  union {
    TrainingSample _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainingSampleDefaultTypeInternal _TrainingSample_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_test_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_test_2eproto = nullptr;
const ::uint32_t
    TableStruct_test_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::TrainingSample, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::TrainingSample, _impl_.is_bidding_),
        PROTOBUF_FIELD_OFFSET(::TrainingSample, _impl_.player_idx_),
        PROTOBUF_FIELD_OFFSET(::TrainingSample, _impl_.state_features_),
        PROTOBUF_FIELD_OFFSET(::TrainingSample, _impl_.policy_target_),
        PROTOBUF_FIELD_OFFSET(::TrainingSample, _impl_.value_target_),
        PROTOBUF_FIELD_OFFSET(::TrainingSample, _impl_.actual_game_win_value_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::TrainingSample)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_TrainingSample_default_instance_._instance,
};
const char descriptor_table_protodef_test_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\ntest.proto\"\234\001\n\016TrainingSample\022\022\n\nis_bi"
    "dding\030\001 \001(\010\022\022\n\nplayer_idx\030\002 \001(\005\022\026\n\016state"
    "_features\030\003 \003(\002\022\025\n\rpolicy_target\030\004 \003(\002\022\024"
    "\n\014value_target\030\005 \001(\002\022\035\n\025actual_game_win_"
    "value\030\006 \001(\002b\006proto3"
};
static ::absl::once_flag descriptor_table_test_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_test_2eproto = {
    false,
    false,
    179,
    descriptor_table_protodef_test_2eproto,
    "test.proto",
    &descriptor_table_test_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_test_2eproto::offsets,
    file_level_enum_descriptors_test_2eproto,
    file_level_service_descriptors_test_2eproto,
};
// ===================================================================

class TrainingSample::_Internal {
 public:
};

TrainingSample::TrainingSample(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TrainingSample)
}
inline PROTOBUF_NDEBUG_INLINE TrainingSample::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::TrainingSample& from_msg)
      : state_features_{visibility, arena, from.state_features_},
        policy_target_{visibility, arena, from.policy_target_},
        _cached_size_{0} {}

TrainingSample::TrainingSample(
    ::google::protobuf::Arena* arena,
    const TrainingSample& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrainingSample* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_bidding_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_bidding_),
           offsetof(Impl_, actual_game_win_value_) -
               offsetof(Impl_, is_bidding_) +
               sizeof(Impl_::actual_game_win_value_));

  // @@protoc_insertion_point(copy_constructor:TrainingSample)
}
inline PROTOBUF_NDEBUG_INLINE TrainingSample::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : state_features_{visibility, arena},
        policy_target_{visibility, arena},
        _cached_size_{0} {}

inline void TrainingSample::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_bidding_),
           0,
           offsetof(Impl_, actual_game_win_value_) -
               offsetof(Impl_, is_bidding_) +
               sizeof(Impl_::actual_game_win_value_));
}
TrainingSample::~TrainingSample() {
  // @@protoc_insertion_point(destructor:TrainingSample)
  SharedDtor(*this);
}
inline void TrainingSample::SharedDtor(MessageLite& self) {
  TrainingSample& this_ = static_cast<TrainingSample&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TrainingSample::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TrainingSample(arena);
}
constexpr auto TrainingSample::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.state_features_) +
          decltype(TrainingSample::_impl_.state_features_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.policy_target_) +
          decltype(TrainingSample::_impl_.policy_target_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TrainingSample), alignof(TrainingSample), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TrainingSample::PlacementNew_,
                                 sizeof(TrainingSample),
                                 alignof(TrainingSample));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TrainingSample::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TrainingSample_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TrainingSample::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TrainingSample>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TrainingSample::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TrainingSample>(), &TrainingSample::ByteSizeLong,
            &TrainingSample::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_._cached_size_),
        false,
    },
    &TrainingSample::kDescriptorMethods,
    &descriptor_table_test_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TrainingSample::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> TrainingSample::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::TrainingSample>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool is_bidding = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TrainingSample, _impl_.is_bidding_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.is_bidding_)}},
    // int32 player_idx = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingSample, _impl_.player_idx_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.player_idx_)}},
    // repeated float state_features = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.state_features_)}},
    // repeated float policy_target = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.policy_target_)}},
    // float value_target = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.value_target_)}},
    // float actual_game_win_value = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.actual_game_win_value_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_bidding = 1;
    {PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.is_bidding_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 player_idx = 2;
    {PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.player_idx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated float state_features = 3;
    {PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.state_features_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float policy_target = 4;
    {PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.policy_target_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // float value_target = 5;
    {PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.value_target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float actual_game_win_value = 6;
    {PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.actual_game_win_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TrainingSample::Clear() {
// @@protoc_insertion_point(message_clear_start:TrainingSample)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_features_.Clear();
  _impl_.policy_target_.Clear();
  ::memset(&_impl_.is_bidding_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.actual_game_win_value_) -
      reinterpret_cast<char*>(&_impl_.is_bidding_)) + sizeof(_impl_.actual_game_win_value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TrainingSample::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TrainingSample& this_ = static_cast<const TrainingSample&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TrainingSample::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TrainingSample& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:TrainingSample)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool is_bidding = 1;
          if (this_._internal_is_bidding() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_is_bidding(), target);
          }

          // int32 player_idx = 2;
          if (this_._internal_player_idx() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_player_idx(), target);
          }

          // repeated float state_features = 3;
          if (this_._internal_state_features_size() > 0) {
            target = stream->WriteFixedPacked(3, this_._internal_state_features(), target);
          }

          // repeated float policy_target = 4;
          if (this_._internal_policy_target_size() > 0) {
            target = stream->WriteFixedPacked(4, this_._internal_policy_target(), target);
          }

          // float value_target = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_value_target()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_value_target(), target);
          }

          // float actual_game_win_value = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_actual_game_win_value()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_actual_game_win_value(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:TrainingSample)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TrainingSample::ByteSizeLong(const MessageLite& base) {
          const TrainingSample& this_ = static_cast<const TrainingSample&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TrainingSample::ByteSizeLong() const {
          const TrainingSample& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:TrainingSample)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float state_features = 3;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_state_features_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated float policy_target = 4;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_policy_target_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // bool is_bidding = 1;
            if (this_._internal_is_bidding() != 0) {
              total_size += 2;
            }
            // int32 player_idx = 2;
            if (this_._internal_player_idx() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_player_idx());
            }
            // float value_target = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_value_target()) != 0) {
              total_size += 5;
            }
            // float actual_game_win_value = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_actual_game_win_value()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TrainingSample::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrainingSample*>(&to_msg);
  auto& from = static_cast<const TrainingSample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TrainingSample)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_state_features()->MergeFrom(from._internal_state_features());
  _this->_internal_mutable_policy_target()->MergeFrom(from._internal_policy_target());
  if (from._internal_is_bidding() != 0) {
    _this->_impl_.is_bidding_ = from._impl_.is_bidding_;
  }
  if (from._internal_player_idx() != 0) {
    _this->_impl_.player_idx_ = from._impl_.player_idx_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_value_target()) != 0) {
    _this->_impl_.value_target_ = from._impl_.value_target_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_actual_game_win_value()) != 0) {
    _this->_impl_.actual_game_win_value_ = from._impl_.actual_game_win_value_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrainingSample::CopyFrom(const TrainingSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrainingSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrainingSample::InternalSwap(TrainingSample* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.state_features_.InternalSwap(&other->_impl_.state_features_);
  _impl_.policy_target_.InternalSwap(&other->_impl_.policy_target_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.actual_game_win_value_)
      + sizeof(TrainingSample::_impl_.actual_game_win_value_)
      - PROTOBUF_FIELD_OFFSET(TrainingSample, _impl_.is_bidding_)>(
          reinterpret_cast<char*>(&_impl_.is_bidding_),
          reinterpret_cast<char*>(&other->_impl_.is_bidding_));
}

::google::protobuf::Metadata TrainingSample::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_test_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
